[project]
name = "codex-tso-dso-nmpc"
version = "0.1.0"
description = "Add your description here"
readme = "README.md"
requires-python = ">=3.11"

# 核心运行依赖（保持精简；求解器单独装）
dependencies = [
  "pyomo>=6.9",
  "numpy>=1.26",
  "pandas>=2.2",
  "scipy>=1.11",
  "matplotlib>=3.8",
  "pandapower>=2.14",
  # 如需命令行/美化输出，可后续补充： "typer>=0.12", "rich>=13.7"
  "pyyaml>=6.0.2",
  "tqdm>=4.67.1",
  "pytest>=8.4.2",
  "pypower>=5.1.19",
]

# 入口脚本（需要 package=true 或声明 build-system 才会生效）
[project.scripts]
codex-nmpc = "app.main:main"
main = "app.main:main"

# ---------------------------
# 依赖分组（PEP 735；用于开发/并行等非发布场景）
# 安装方式：
#   uv sync（默认装所有组）或
#   uv sync --no-group dev --group prod（只装指定组）
# ---------------------------
[dependency-groups]
dev = [
  "pytest>=8.0",
  "pytest-cov>=5.0",
  "ruff>=0.6.8",
  "pre-commit>=3.8",
  "mypy>=1.10",
  # VS Code 用户可选：
  # "pyright>=1.1.390",
]

# 分布式/并行（按需）
distributed = [
  "ray>=2.37",
]

# ---------------------------
# uv 设置
# ---------------------------
[tool.uv]
# managed 默认为 true；显式声明无妨
managed = true
# 将本项目视为“可安装包”，使 [project.scripts] 与可编辑安装生效
package = true

# ---------------------------
# 代码质量：Ruff（格式化 + Lint）
# ---------------------------
[tool.ruff]
line-length = 120
target-version = "py311"

[tool.ruff.lint]
select = [
  "E", "F",         # pycodestyle / pyflakes
  "I",              # import 排序
  "B",              # flake8-bugbear
  "UP",             # pyupgrade
  "C90",            # mccabe 复杂度
]
ignore = [
  "E203",           # 与某些 formatter 兼容
  "E501",           # 长行：由 formatter/编辑器控制
]
mccabe = { max-complexity = 12 }

[tool.ruff.lint.per-file-ignores]
"src/sim/runner.py" = ["C901"]
"src/sim/scenario.py" = ["C901"]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false

# ---------------------------
# 测试：pytest
# ---------------------------
[tool.pytest.ini_options]
minversion = "8.0"
addopts = "-q --strict-markers --disable-warnings"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
xfail_strict = true
markers = [
  "integration: long-running integration scenarios",
]

# ---------------------------
# 覆盖率（需安装 pytest-cov）
# ---------------------------
[tool.coverage.run]
branch = true
# 你的包目录是 src/
source = ["src"]

[tool.coverage.report]
show_missing = true
skip_covered = true
fail_under = 80

# ---------------------------
# 构建系统（建议显式声明，以保证可安装）
# ---------------------------
[build-system]
requires = ["setuptools>=68"]
build-backend = "setuptools.build_meta"
[tool.mypy]
python_version = "3.11"
strict = true
plugins = []
warn_unused_ignores = true
warn_redundant_casts = true
disallow_any_generics = true
no_implicit_optional = true
check_untyped_defs = true
explicit_package_bases = true
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = [
  "pandas.*",
  "pyomo.*",
  "pandapower.*",
  "yaml",
]
ignore_missing_imports = true
